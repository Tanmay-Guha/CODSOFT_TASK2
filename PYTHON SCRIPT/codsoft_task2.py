# -*- coding: utf-8 -*-
"""CODSOFT-TASK2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19eV74K85XSOTUjzNBMlVoYBOarTdF9OI
"""

# MOVIE RATING PREDICTION PROJECT

# Step 1: Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

df = pd.read_csv('/content/IMDb Movies India.csv', encoding='latin-1') # or 'ISO-8859-1'

# Step 3: View basic info about the dataset
print(df.head())
print(df.info())
print(df.describe())

# Step 4: Handle missing values
df.fillna(method='ffill', inplace=True)

# Step 5: Encode categorical features like Genre, Director, Actors
label_encoders = {}
# Get a list of all object (string) columns
object_cols = df.select_dtypes(include=['object']).columns.tolist()
# Exclude the 'Rating' column if it's an object type
if 'Rating' in object_cols:
    object_cols.remove('Rating')

for col in object_cols:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col].astype(str))
    label_encoders[col] = le

# Step 6: Define features (X) and target (y)
X = df.drop(columns=['Rating'])  # Replace 'Rating' with your actual rating column name
y = df['Rating']

# Convert 'y' to numeric, coercing non-numeric values to NaN
y = pd.to_numeric(y, errors='coerce')

# Drop rows with NaN values in 'y' from both X and y
X = X[y.notna()]
y = y[y.notna()]

# Step 7: Split into training and testing data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 8: Train a regression model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 9: Make predictions
y_pred = model.predict(X_test)

# Step 10: Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

# Optional: Feature Importance
importances = model.feature_importances_
features = X.columns
plt.figure(figsize=(8, 6))
sns.barplot(x=importances, y=features)
plt.title("Feature Importance for Movie Rating Prediction")
plt.show()